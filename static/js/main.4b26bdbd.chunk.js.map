{"version":3,"sources":["Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["getEmoji","votes","Joke","props","handleUpVote","bind","handleDownVote","e","this","vote","id","className","onClick","style","borderColor","text","Component","JokeList","renderJokes","state","jokes","map","j","key","JSON","parse","window","localStorage","getItem","sort","a","b","loading","sceenJokes","Set","getJokes","fetchJokes","handleClick","length","qty","setState","newJoke","axios","get","headers","Accept","answer","data","joke","has","console","log","push","uuid","st","setItem","stringify","delta","src","alt","defaultProps","numJokesToGet","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b26bdbd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Joke.css';\n\nfunction getEmoji(votes) {\n\tif (votes >= 15) return 'em-rolling_on_the_floor_laughing';\n\tif (votes >= 12) return 'em-joy';\n\tif (votes >= 9) return 'em-stuck_out_tongue_closed_eyes';\n\tif (votes >= 6) return 'em-laughing';\n\tif (votes >= 3) return 'em-grinning';\n\tif (votes >= 0) return 'em-neutral_face';\n\tif (votes >= -3) return 'em-face_with_raised_eyebrow';\n\treturn 'em-angry';\n}\n\nfunction getColor(votes) {\n\tif (votes >= 15) {\n\t\treturn '#4CAF50';\n\t} else if (votes >= 12) {\n\t\treturn '#8BC34A';\n\t} else if (votes >= 9) {\n\t\treturn '#CDDC39';\n\t} else if (votes >= 6) {\n\t\treturn '#FFEB3B';\n\t} else if (votes >= 3) {\n\t\treturn '#FFC107';\n\t} else if (votes >= 0) {\n\t\treturn '#FF9800';\n\t} else {\n\t\treturn '#f44336';\n\t}\n}\n\nclass Joke extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleUpVote = this.handleUpVote.bind(this);\n\t\tthis.handleDownVote = this.handleDownVote.bind(this);\n\t}\n\thandleDownVote(e) {\n\t\tthis.props.vote(this.props.id, -1);\n\t}\n\thandleUpVote(e) {\n\t\tthis.props.vote(this.props.id, 1);\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<li className=\"Joke\">\n\t\t\t\t<div className=\"Joke-buttons\">\n\t\t\t\t\t<i className=\"fas fa-arrow-up\" onClick={this.handleUpVote} />\n\t\t\t\t\t<span\n\t\t\t\t\t\tclassName=\"Joke-votes\"\n\t\t\t\t\t\tstyle={{ borderColor: getColor(this.props.votes) }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.props.votes}\n\t\t\t\t\t</span>\n\t\t\t\t\t<i className=\"fas fa-arrow-down\" onClick={this.handleDownVote} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"Joke-text\">{this.props.text}</div>\n\t\t\t\t<div className=\"Joke-smiley\">\n\t\t\t\t\t<i className={`em ${getEmoji(this.props.votes)}`} />\n\t\t\t\t</div>\n\t\t\t</li>\n\t\t);\n\t}\n}\n\nexport default Joke;\n","import React, { Component } from 'react';\nimport Joke from './Joke';\nimport axios from 'axios';\nimport uuid from 'uuid/v4';\nimport './JokeList.scss';\n\nclass JokeList extends Component {\n\tstatic defaultProps = {\n\t\tnumJokesToGet: 10\n\t};\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tjokes: JSON.parse(window.localStorage.getItem('jokes') || '[]').sort(\n\t\t\t\t(a, b) => b.votes - a.votes\n\t\t\t),\n\t\t\tloading: false\n\t\t};\n\t\tthis.sceenJokes = new Set(this.state.jokes.map((j) => j.text));\n\t\tthis.vote = this.vote.bind(this);\n\t\tthis.getJokes = this.getJokes.bind(this);\n\t\tthis.fetchJokes = this.fetchJokes.bind(this);\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.state.jokes.length <= 0 && this.getJokes(10);\n\t}\n\n\tasync getJokes(qty) {\n\t\tthis.setState({ loading: true }, () => this.fetchJokes(qty));\n\t}\n\n\tasync fetchJokes(qty) {\n\t\tlet jokes = [];\n\t\tlet newJoke = '';\n\t\twhile (jokes.length < qty) {\n\t\t\tlet answer = await axios.get('https://icanhazdadjoke.com/', {\n\t\t\t\theaders: { Accept: 'application/json' }\n\t\t\t});\n\t\t\tnewJoke = answer.data.joke;\n\t\t\tif (this.sceenJokes.has(newJoke)) {\n\t\t\t\tconsole.log('Duplicated Joke', newJoke);\n\t\t\t} else {\n\t\t\t\tjokes.push({ id: uuid(), text: newJoke, votes: 0 });\n\t\t\t}\n\t\t}\n\t\tthis.setState(\n\t\t\t(st) => ({\n\t\t\t\tjokes: [ ...st.jokes, ...jokes ].sort((a, b) => b.votes - a.votes),\n\t\t\t\tloading: false\n\t\t\t}),\n\t\t\t() => {\n\t\t\t\twindow.localStorage.setItem('jokes', JSON.stringify(this.state.jokes));\n\t\t\t}\n\t\t);\n\t}\n\n\tvote(id, delta) {\n\t\tthis.setState(\n\t\t\t(st) => ({\n\t\t\t\tjokes: st.jokes.map((j) => (j.id === id ? { ...j, votes: j.votes + delta } : j))\n\t\t\t}),\n\t\t\t() => {\n\t\t\t\twindow.localStorage.setItem('jokes', JSON.stringify(this.state.jokes));\n\t\t\t}\n\t\t);\n\t}\n\n\trenderJokes = () => this.state.jokes.map((j) => <Joke key={j.id} {...j} vote={this.vote} />);\n\n\thandleClick(e) {\n\t\tthis.getJokes(10);\n\t}\n\n\trender() {\n\t\tif (this.state.loading) {\n\t\t\treturn (\n\t\t\t\t<div className=\"JokeList-spinner\">\n\t\t\t\t\t<i className=\"far fa-8x fa-laugh fa-spin\" />\n\t\t\t\t\t<h1 className=\"JokeList-title\">Loading...</h1>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"JokeList\">\n\t\t\t\t<div className=\"JokeList-sidebar\">\n\t\t\t\t\t<h1 className=\"JokeList-title\">\n\t\t\t\t\t\t<span>Dad</span> Jokes\n\t\t\t\t\t</h1>\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc=\"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/160/emojione/211/face-with-tears-of-joy_1f602.png\"\n\t\t\t\t\t\talt=\"lol face\"\n\t\t\t\t\t/>\n\t\t\t\t\t<button className=\"JokeList-button\" onClick={this.handleClick}>\n\t\t\t\t\t\tGet more!\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<ul className=\"JokeList-container\">{this.renderJokes()}</ul>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default JokeList;\n","import React from 'react';\nimport JokeList from './JokeList';\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<JokeList />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}